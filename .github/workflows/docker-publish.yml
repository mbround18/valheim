name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:
    
env:
  CARGO_TERM_COLOR: always

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix: 
        image: [odin, valheim]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build ${{ matrix.image }}
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./Dockerfile.${{ matrix.image }}
          push: false
          tags: mbround18/${{ matrix.image }}:latest  
          build-args: |
            "GITHUB_SHA=${GITHUB_SHA}"
            "GITHUB_REF=${GITHUB_REF}"
            "GITHUB_REPOSITORY=${GITHUB_REPOSITORY}"
      
      - name: Finalization
        run: echo "Finalized"
        
  push:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix: 
        image: [odin, valheim]

    steps:
      - uses: actions/checkout@v2
        
      - name: Docker meta
        id: meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          # list of Docker images to use as base name for tags
          images: |
            mbround18/${{ matrix.image }}
            ghcr.io/mbround18/${{ matrix.image }}

          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          username: mbround18
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.${{ matrix.image }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            "GITHUB_SHA=${GITHUB_SHA}"
            "GITHUB_REF=${GITHUB_REF}"
            "GITHUB_REPOSITORY=${GITHUB_REPOSITORY}"

      - name: Send Release Notification
        if: github.event_name != 'pull_request' && "${{ matrix.image }}" == "valheim"
        run: |
          # Send release notification
          docker run --rm \
          -e NAME="New Version: ${{ matrix.image }}:latest" \
          mbround18/odin:latest notify "New release of ${{ matrix.image }}:latest !! Please use pull the latest ${DOCKER_IMAGE_BASE}:${VERSION}. Then restart your server via your preferred method." \
          --webhook "${{ secrets.RELEASE_WEBHOOK }}"


  auto-shipit:
    env:
      GH_TOKEN: "${{ secrets.GH_TOKEN }}"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: borales/actions-yarn@v2.0.0
        with:
          cmd: install
          
      - uses: borales/actions-yarn@v2.0.0
        with:
          cmd: auto shipit
